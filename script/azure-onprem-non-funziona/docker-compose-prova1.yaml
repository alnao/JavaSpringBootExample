version: '3.8'

services:
  # üóÑÔ∏è SQL Server per i dati relazionali
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: gestioneannotazioni-sqlserver
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: GestioneAnnotazioni123!
      MSSQL_DB: gestioneannotazioni
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./init-database/init-sqlserver.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - azure-network
#    command: >
#      bash -c "
#      apt-get update && 
#      apt-get install -y net-tools && 
#      /opt/mssql/bin/sqlservr"
    healthcheck:
      # CORREZIONE: formato corretto per health check
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'GestioneAnnotazioni123!' -C -Q 'SELECT 1' || exit 1"]
      #test: ["CMD-SHELL", "netstat -tln | grep :1433 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s

  # üåê Azure CosmosDB Emulator
  cosmosdb: #see https://learn.microsoft.com/en-us/azure/cosmos-db/emulator
    image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
    container_name: gestioneannotazioni-cosmosdb
    environment:
      AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 10
#      AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: true
      AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE: "0.0.0.0"
    ports:
      - "8081:8081"   # CosmosDB Emulator API
      - "10251:10251" # CosmosDB Emulator Data Explorer
      - "10252:10252" # CosmosDB Emulator MongoDB API
      - "10253:10253" # CosmosDB Emulator Table API
      - "10254:10254" # CosmosDB Emulator Cassandra API
      - "10255:10255" # CosmosDB Emulator Gremlin API
    volumes:
      - cosmosdb_data:/tmp/cosmos
    networks:
      - azure-network
    healthcheck:
      # CORREZIONE: health check pi√π semplice
      test: ["CMD-SHELL", "curl -k https://127.0.0.1:8081/ -w '%{http_code}' -o /dev/null -s | grep -E '(200|401|403)' || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 10
      start_period: 60s
  cosmos-cert-downloader:
    image: curlimages/curl:latest
    container_name: cosmos-cert-downloader
    depends_on:
      cosmosdb:
        condition: service_healthy
    user: "0:0"  # üëà SOLUZIONE: Forza l'uso di root (UID:GID = 0:0)
    command: >
      sh -c "
      echo 'Downloading CosmosDB certificate...';
      curl --insecure https://cosmosdb:8081/_explorer/emulator.pem -o /certs/cosmosdb-cert.crt &&
      chmod 644 /certs/cosmosdb-cert.crt &&
      echo 'Certificate downloaded successfully' &&
      cat /certs/cosmosdb-cert.crt && 
      ls -lh /certs/cosmosdb-cert.crt
      "
    volumes:
      - cosmos_certs:/certs
    networks:
      - azure-network

  # üöÄ Microservizio Gestione Annotazioni (Profilo Azure)
  app:
    image: alnao/gestioneannotazioni:latest
    container_name: gestioneannotazioni-app-azure
    depends_on:
      sqlserver:
        condition: service_healthy
      cosmosdb:
        condition: service_healthy
      cosmos-cert-downloader:
        condition: service_completed_successfully
    extra_hosts:
      - "cosmosdb:127.0.0.1"
    environment:
      JAVA_OPTS: >-
        -Xms256m -Xmx512m -Dio.netty.handler.ssl.noOpenSsl=true
        -Djavax.net.ssl.trustStoreType=JKS
        -Djavax.net.ssl.trustStore=
        -Djavax.net.ssl.trustStorePassword=
        -Dcom.azure.cosmos.implementation.ignoreInvalidSSL=true
      # Profilo Spring Boot
      SPRING_PROFILES_ACTIVE: azure
      
      # SQL Server Configuration SPRING_DATASOURCE_URL: jdbc:sqlserver://sqlserver:1433;databaseName=gestioneannotazioni;encrypt=false
      MSSQL_SQLSERVER_ENCRYPT: 'false'
      MSSQL_SQLSERVER_HOST: sqlserver
      MSSQL_SQLSERVER_DATABASE: gestioneannotazioni
      MSSQL_SPRING_DATASOURCE_USERNAME: sa
      MSSQL_SPRING_DATASOURCE_PASSWORD: GestioneAnnotazioni123!
      
      # Azure CosmosDB Configuration
      AZURE_COSMOS_DISABLE_SSL_VERIFICATION: 'true'
      AZURE_COSMOS_URI: https://cosmosdb:8081
      AZURE_COSMOS_DATABASE: gestioneannotazioni
      AZURE_COSMOS_KEY: C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
      # Questa √® la chiave di sviluppo fissa che Microsoft ha stabilito per l'Azure Cosmos DB Emulator. √à documentata ufficialmente da Microsoft e utilizzata da tutti gli sviluppatori per test locali.

      # AGGIUNGI: Parametri per gestire SSL self-signed
      #AZURE_COSMOS_CONNECTION_MODE: GATEWAY
      #AZURE_COSMOS_ENABLE_CONTENT_RESPONSE_ON_WRITE: 'true'
      #AZURE_COSMOS_ALLOW_INSECURE_CONNECTIONS: 'true'
      #AZURE_COSMOS_TRUST_ALL_CERTIFICATES: 'true'

      # Service Bus Configuration (simulato con Kafka)
      AZURE_SERVICEBUS_CONNECTION_STRING: Endpoint=sb://localhost:9092/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=test
      
      # Server Configuration
      SERVER_PORT: 8080
      
      # Logging
      LOGGING_LEVEL_IT_ALNAO: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG

    # Comando per importare il certificato prima di avviare l'app
    command: >
      sh -c "
        echo 'üìã Importing CosmosDB certificate...';
        ls -la /certs/;
        cp /certs/cosmosdb-cert.crt /usr/local/share/ca-certificates/;
        CACERTS_PATH=$$(find /usr -name cacerts 2>/dev/null | head -n 1);
        echo \"Found cacerts at: $$CACERTS_PATH\";
        keytool -import -trustcacerts -noprompt \
          -alias cosmosdb-emulator \
          -file /certs/cosmosdb-cert.crt \
          -keystore $$CACERTS_PATH \
          -storepass changeit;
        echo '‚úÖ Certificate imported successfully';
        echo 'üîç Listing certificates in Java truststore...';
        keytool -list -keystore $$CACERTS_PATH -storepass changeit | grep cosmosdb || echo 'cosmosdb cert not found';
        update-ca-certificates;
        echo 'üöÄ Starting application...';
        su -s /bin/sh appuser -c \"java $$JAVA_OPTS -jar /app/app.jar\"
      "
    volumes:
      - cosmos_certs:/certs
    ports:
      - "8085:8080"
    networks:
      - azure-network
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üîß Adminer per SQL Server
  adminer-sqlserver:
    image: adminer:4.8.1
    container_name: gestioneannotazioni-adminer-sqlserver
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      ADMINER_DEFAULT_SERVER: sqlserver
      ADMINER_DESIGN: galkaev
    ports:
      - "8086:8080"
    networks:
      - azure-network

  # üåê CosmosDB Data Explorer (gi√† incluso nel container CosmosDB)
  # Accessibile direttamente tramite https://localhost:8081/_explorer/index.html

  # üìä Azure Storage Explorer (Azurite per Blob Storage locale)
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: gestioneannotazioni-azurite
    command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --loose
    ports:
      - "10003:10000" # Blob Service
      - "10001:10001" # Queue Service  
      - "10002:10002" # Table Service
    volumes:
      - azurite_data:/data
    networks:
      - azure-network

  # üéõÔ∏è Azurite Explorer (Web UI per Azure Storage)
  azure-storage-explorer:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: gestioneannotazioni-storage-explorer
    command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --loose --location /data --debug /data/debug.log
    environment:
      AZURITE_ACCOUNTS: devstoreaccount1:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    ports:
      - "8087:10000"
    volumes:
      - azurite_data:/data
    networks:
      - azure-network

  debug:
    image: debian:bookworm-slim
    container_name: gestioneannotazioni-debug-shell
    command: tail -f /dev/null
    networks:
      - azure-network
    volumes:
      - cosmos_certs:/certs
    tty: true
    stdin_open: true
    entrypoint: ["/bin/sh", "-c", "apt update && apt install -y curl iputils-ping && tail -f /dev/null"]
  # docker exec -it debug-shell /bin/bash
  # ping cosmosdb
  # curl -v https://cosmosdb:8081
  # curl -v --insecure https://cosmosdb:8081/_explorer/emulator.pem
  # ls /certs

volumes:
  sqlserver_data:
    driver: local
  cosmosdb_data:
    driver: local
  azurite_data:
    driver: local
  cosmos_certs:
    driver: local

networks:
  azure-network:
    driver: bridge
    name: gestioneannotazioni-azure-network