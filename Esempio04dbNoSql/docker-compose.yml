# docker-compose.yml
version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: esempio04-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: microservice_db
    volumes:
      - mongodb_data:/data/db
      - ./config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - esempio04-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # DynamoDB Local
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: esempio04-dynamodb
    restart: unless-stopped
    ports:
      - "8000:8000"
      #    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-dbPath", "./data"]
      #    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-dbPath", "/mnt/data"]
      # command: ["sh", "-c", "chmod -R 777 /mnt/data && java -jar DynamoDBLocal.jar -sharedDb -dbPath /mnt/data"]
      # Override the image's ENTRYPOINT to use a shell
      # entrypoint: ["sh", "-c"]
      # Now, the 'command' becomes the argument to 'sh -c'
      #command: ["chmod -R 777 /mnt/data && java -jar DynamoDBLocal.jar -sharedDb -dbPath /mnt/data"]
      # command: ["java -jar DynamoDBLocal.jar -sharedDb -dbPath /mnt/data"]
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb"]
#    volumes:
#      - dynamodb_data:/mnt/data
    networks:
      - esempio04-network
    healthcheck:
      #test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      test: ["CMD-SHELL", "curl http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # DynamoDB Admin (interfaccia web per DynamoDB)
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    container_name: esempio04-dynamodb-admin
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      DYNAMO_ENDPOINT: http://dynamodb-local:8000
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
    depends_on:
      - dynamodb-local
    networks:
      - esempio04-network

  # MongoDB Express (interfaccia web per MongoDB)
  mongo-express:
    image: mongo-express:1.0.2
    container_name: esempio04-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongodb:27017/
#      ME_CONFIG_BASICAUTH: false #  (admin/pass)
    depends_on:
      - mongodb
    networks:
      - esempio04-network

  # Il nostro microservizio - versione DynamoDB
  microservice:
    build: .
    container_name: esempio04-microservice
    restart: unless-stopped
    ports:
      - "8070:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
#      DATABASE_TYPE: dynamo
      DYNAMODB_ENDPOINT: http://dynamodb-local:8000
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY: local
      AWS_SECRET_KEY: local
      MONGO_HOST: mongodb
#      MONGO_PORT: 27017
      MONGO_PASSWORD: password
      MONGO_USERNAME: root
    depends_on:
      dynamodb-local:
        condition: service_healthy
    networks:
      - esempio04-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Il nostro microservizio - versione MongoDB
#  microservice-mongo:
#    build: .
#    container_name: esempio04-mongo
#    restart: unless-stopped
#    ports:
#      - "8082:8080"
#    environment:
#      SPRING_PROFILES_ACTIVE: docker
#      DATABASE_TYPE: mongo
#      MONGO_HOST: mongodb
##      MONGO_PORT: 27017
#      MONGO_PASSWORD: password
#      MONGO_USERNAME: root
##      SPRING_DATA_MONGODB_URI: mongodb://root:password@mongodb:27017/microservice_db?authSource=admin
#    depends_on:
#      mongodb:
 #       condition: service_healthy
 #   networks:
 #     - esempio04-network
 #   healthcheck:
  #    test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
  #    interval: 30s
  #    timeout: 10s
  #    retries: 5

  # Prometheus per il monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: esempio04-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - esempio04-network

  # Grafana per le dashboard
  grafana:
    image: grafana/grafana:10.2.2
    container_name: esempio04-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - esempio04-network

volumes:
  mongodb_data:
#  dynamodb_data:
  grafana_data:

networks:
  esempio04-network:
    driver: bridge