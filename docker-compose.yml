version: '3.8'
# docker-compose up -d --build
#      docker-compose down --remove-orphans
#      docker volume rm $(docker volume ls -q)
#      docker rmi $(docker images -q)
#
# Servizi esposti:
# - App Spring Boot: http://localhost:8082
# - PostgreSQL: localhost:5432
# - MongoDB: localhost:27017  
# - Kafka: localhost:9092
# - Zookeeper: localhost:2181
# - Adminer (PostgreSQL UI): http://localhost:8083
# - Mongo Express (MongoDB UI): http://localhost:8084
# - Kafka UI: http://localhost:8085


services:
  # PostgreSQL per metadati
  postgres:
    image: postgres:15-alpine
    container_name: gestioneannotazioni-postgres
    environment:
      POSTGRES_DB: gestioneannotazioni
      POSTGRES_USER: gestioneannotazioni_user
      POSTGRES_PASSWORD: gestioneannotazioni_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./script/init-database/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gestioneannotazioni-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gestioneannotazioni_user -d gestioneannotazioni"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB per gestioneannotazioni
  mongodb:
    image: mongo:7.0
    container_name: gestioneannotazioni-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: gestioneannotazioni
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./script/init-database/init-mongodb.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - gestioneannotazioni-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper per Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: gestioneannotazioni-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - gestioneannotazioni-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  kafka-server:
    image: confluentinc/cp-kafka:7.4.0
    container_name: gestioneannotazioni-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka-server:9092,LISTENER_EXTERNAL://kafka-server:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - gestioneannotazioni-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kafka UI per gestione Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: gestioneannotazioni-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: gestioneannotazioni-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-server:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8085:8080"
    depends_on:
      kafka-server:
        condition: service_healthy
    networks:
      - gestioneannotazioni-network

  # Applicazione Spring Boot
  app:
    build:
      context: ./ #application
      dockerfile: Dockerfile
    container_name: gestioneannotazioni-app
    environment:
      SPRING_PROFILES_ACTIVE: kube
      POSTGRES_URL: jdbc:postgresql://postgres:5432/gestioneannotazioni
      POSTGRES_USERNAME: gestioneannotazioni_user
      POSTGRES_PASSWORD: gestioneannotazioni_pass
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/gestioneannotazioni_db?authSource=admin
      KAFKA_BROKER_URL: kafka-server:29092
      EXPORT_ANNOTAZIONI_CRON_EXPRESSION: "0 */2 * * * *" # ogni 2 minuti
      SERVER_PORT: 8080
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka-server:
        condition: service_healthy
    networks:
      - gestioneannotazioni-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Adminer per gestione PostgreSQL
  adminer:
    image: adminer:4.8.1
    container_name: gestioneannotazioni-adminer
    ports:
      - "8083:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - gestioneannotazioni-network

  # Mongo Express per gestione MongoDB
  mongo-express:
    image: mongo-express:1.0.0
    container_name: gestioneannotazioni-mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8084:8081"
    depends_on:
      - mongodb
    networks:
      - gestioneannotazioni-network

volumes:
  postgres_data:
    name: gestioneannotazioni-postgres-data
    driver: local
  mongodb_data:
    name: gestioneannotazioni-mongodb-data
    driver: local
  kafka_data:
    name: gestioneannotazioni-kafka-data
    driver: local

networks:
  gestioneannotazioni-network:
    driver: bridge
